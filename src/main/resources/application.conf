# This is the main configuration file for the application.
# ~~~~~

# Uncomment this to debug log settings
# akka.log-config-on-start = on

# HTTP Interface Stuff
# ~~~~~~~~~~~~~~~~~~~~~
http {
  # Where do we bind?
  interface = "0.0.0.0"

  # What port do we listen on?
  port = 7010

  # Listen queue backlog size?
  backlog = 8096

  # Log requests?
  log-requests = true
}

akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
}

kamon {
  akka {
    # If ask-pattern-timeout-warning is enabled, a WARN level log message will be generated if a future generated by the `ask`
    # pattern fails with a `AskTimeoutException` and the log message will contain information depending of the strategy selected.
    # strategies:
    #   - off: nothing to do.
    #   - lightweight: logs the warning when a timeout is reached using org.aspectj.lang.reflect.SourceLocation.
    #   - heavyweight: logs the warning when a timeout is reached using a stack trace captured at the moment the future was created.
    ask-pattern-timeout-warning = off
  }
  metric.filters {
    akka-actor {
      includes = [ "**" ]
      excludes = [ "*/system/**", "*/user/IO-**" ]
    }
    akka-router {
      includes = []
      excludes = []
    }
    akka-dispatcher {
      includes = []
      excludes = []
    }
  }
 
  # ~~~~~~ StatsD configuration ~~~~~~~~~~~~~~~~~~~~~~~~
 
  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "localhost"
    port = 8125
 
    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 10 second
 
    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes
 
    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    subscriptions {
      histogram       = [ "**" ]
      min-max-counter = [ "**" ]
      gauge           = [ "**" ]
      counter         = [ "**" ]
      trace           = [ "**" ]
      trace-segment   = [ "**" ]
      akka-actor      = [ "**" ]
      akka-dispatcher = [ "**" ]
      akka-router     = [ "**" ]
      system-metric   = [ "**" ]
    }

    # Enable system metrics
    # In order to not get a ClassNotFoundException, we must register the kamon-sytem-metrics module
    report-system-metrics = false
 
    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "kamon-demo"
    }
  }
}
